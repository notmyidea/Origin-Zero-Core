package net.bytebond.core;

import me.TechsCode.UltraEconomy.UltraEconomy;
import me.TechsCode.UltraEconomy.UltraEconomyAPI;
import net.bytebond.core.data.NationYML;
import net.bytebond.core.settings.Config;
import net.bytebond.core.util.EconomyHandler;
import net.bytebond.core.util.Placeholders;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.plugin.Plugin;
import org.bukkit.plugin.java.JavaPlugin;
import org.mineacademy.fo.Common;
import org.mineacademy.fo.plugin.SimplePlugin;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Map;
import java.util.UUID;

public final class Core extends SimplePlugin {


	Map<UUID, NationYML> nations = NationYML.getNations();

	/**
	* Automatically perform login ONCE when the plugin starts.
	*/
	@Override
	protected void onPluginStart() {

	}



	/**
	 * Automatically perform login when the plugin starts and each time it is reloaded.
	 */
	@Override
	protected void onReloadablesStart() {
		Common.setLogPrefix("§b[§7Nations§b]§7 ::");
		Common.setTellPrefix("§b[§7Nations§b]§7 ::");
		// You can check for necessary plugins and disable loading if they are missing
		//Valid.checkBoolean(HookManager.isVaultLoaded(), "You need to install Vault so that we can work with packets, offline player data, prefixes and groups.");

		// Uncomment to load variables
		// Variable.loadVariables();

		//
		// Add your own plugin parts to load automatically here
		// Please see @AutoRegister for parts you do not have to register manually
		//

		//Messenger.

		//NationsDB.getInstance().connect(Data.storage.mysql.hostname, Integer.parseInt(Data.storage.mysql.port), Data.storage.mysql.database, Data.storage.mysql.username, Data.storage.mysql.password);
		this.registerEvents(this);
		// managed by @AutoRegister in the class
		//registerCommands(new NationCommand());

		Common.logFramed("Loading Nations " + this.getDescription().getVersion() + "\n https://github.com/notmyidea/Origin-Zero-Core");

		Path dataFolder = Paths.get("plugins/Core/data");
		if (Files.notExists(dataFolder)) {
			try {
				Files.createDirectory(dataFolder);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		// Connect to DB
		// load all data from the database into the cache
		// check all Nations
		// check all Players
		// Run

		/*
		 * Enable UECon Currencies & Vault Currencies
		 *
		 */

		ArrayList<String> dependencies = new ArrayList<>();
		if(Bukkit.getPluginManager().getPlugin("PlaceholderAPI") != null) {
			Common.log("PlaceholderAPI found, enabling placeholders");
			new Placeholders(this).register();
			dependencies.add("PlaceholderAPI");

		} else {
			Common.log("PlaceholderAPI not found, disabling plugin");
			Bukkit.getPluginManager().disablePlugin(this);
			System.exit(1);
		}

		if(Bukkit.getPluginManager().getPlugin("UltraEconomy") == null) {
			Common.log("UltraEconomy not found, disabling plugin");
			Bukkit.getPluginManager().disablePlugin(this); // <-- THIS DOES NOT WORK
			System.exit(1);
		}
		dependencies.add("UltraEconomy");

		if(Bukkit.getPluginManager().getPlugin("Vault") == null) {
			Common.log("Vault not found, disabling plugin");
			Bukkit.getPluginManager().disablePlugin(this); // <-- THIS DOES NOT WORK
			System.exit(1);
		}
		dependencies.add("Vault");
		// String dependencieStr = String.join(",", dependencies); SysOutPrntn(dependencieStr);


		if (Config.General.debugging) {
			Common.log("§cDebugging is enabled");
			Common.log("Loading dependencies . . .");
			dependencies.forEach(dependency -> Common.log("Dependency: " + dependency + " v."+ Bukkit.getPluginManager().getPlugin(dependency).getDescription().getVersion() + ChatColor.GREEN + " loaded."));
			Common.log("loading configuration files . . .");
			NationYML.getNations().forEach((uuid, nation) -> Common.log("Nation: " + nation.getString("nationName") + " loaded"));
			Common.log("Nation & Configuration files loaded");
			Common.logNoPrefix("UECON Prices checkup:");
			if(ulEcon == null) {
				Common.log("UltraEconomyAPI is null, functionality will be limited, the plugin should have" +
						"actually disabled itself multiple seconds (error throws?) ago.");
			} else {
			}
			Common.log("International-Market: ");
		}

		Common.log("Due to issues with UltraEconomyAPI being dogshit, you have to " +
				"manually create the currencies using their gui, " +
				"the plugin will not work without the currencies being created MANUALLY.");
        if (EconomyHandler.checkIfCurrenciesExist()) {
			Common.log("Currencies exist, plugin will work as intended.");
			// all currencies:
			EconomyHandler economyHandler = new EconomyHandler();
			Common.log("Currencies: " + String.join(",", economyHandler.getAllCurrencies().keySet()) + " loaded");
        } else {
			Common.log("Currencies do not exist, plugin will now shut down, if it doesnt, something broke already");
			Bukkit.getPluginManager().disablePlugin(this);
        }


    }

	@Override
	public int getMetricsPluginId() {
		// disable in /plugins/bStats/config.yml
		return 22047;
	}


	@Override
	protected void onPluginPreReload() {

		// Close your database here if you use one
		//YourDatabase.getInstance().close();
	}

	/* ------------------------------------------------------------------------------- */
	/* Events */
	/* ------------------------------------------------------------------------------- */

	/**
	 * An example event that checks if the right clicked entity is a cow, and makes an explosion.
	 * You can write your events to your main class without having to register a listener.
	 *
	 * @param event
	 */
	//@EventHandler
	//public void onRightClick(final PlayerInteractEntityEvent event) {
	//	if (event.getRightClicked().getType() == EntityType.COW)
	//		event.getRightClicked().getWorld().createExplosion(event.getRightClicked().getLocation(), 5);
	//}

	/*
	 * THIS HAS BROKEN MEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
	 */



	/* ------------------------------------------------------------------------------- */
	/* Static */
	/* ------------------------------------------------------------------------------- */

	/**
	 * Return the instance of this plugin, which simply refers to a static
	 * field already created for you in SimplePlugin but casts it to your
	 * specific plugin instance for your convenience.
	 *
	 * @return
	 */
	public static Core getInstance() {
		return (Core) SimplePlugin.getInstance();
	}
}
