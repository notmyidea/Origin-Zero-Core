#if (${PACKAGE_NAME} && ${PACKAGE_NAME} != "")package ${PACKAGE_NAME};#end
#parse("File Header.java")
 
import lombok.Getter;
import org.bukkit.inventory.ItemStack;
import org.mineacademy.fo.Common;
import org.mineacademy.fo.remain.CompChatColor;
import org.mineacademy.fo.settings.ConfigItems;
import org.mineacademy.fo.settings.YamlConfig;
 
import java.util.List;
import java.util.Set;
 
/**
 * If you want to store your settings for a model instance in separate files,
 * this class shows you how to achieve it.
 * <p>
 * For example, in our Boss plugin, each monster is stored in a separate file
 * in the bosses/ folder by its name, such as bosses/Musk.yml, bosses/Wrath.yml etc.
 */
@Getter
public final class ${NAME} extends YamlConfig {
 
    /**
     * The folder name where all items are stored
     */
    private static final String FOLDER = "${FOLDER}";
 
    /**
     * The config helper instance which loads and saves items
     */
    private final static ConfigItems<${NAME}> loadedData = ConfigItems.fromFolder(FOLDER, ${NAME}.class);
 
    /**
     * These are the parameters you can specify to the file.
     * <p>
     * In this example I am saving when player first joined,
     * his chat color and his items before the death.
     */
    private String firstJoinDate; // We can set this data to TimeUtil.getFormattedDate() for example.
    private CompChatColor chatColor;
    private List<ItemStack> itemsBeforeDeath;
 
    /*
     * Used when creating and loading a new file.
     */
    private ${NAME}(final String name) {
        this.setHeader(
                Common.configLine(),
                "This is the header of a '" + name + "' file.",
                " ",
                "This file was created with TemplateFolderDate template.",
                "Credits to AdoNikeOFFICE!",
                Common.configLine() + "\n"
        );
 
        this.loadConfiguration(NO_DEFAULT, FOLDER + "/" + name + ".yml");
    }
 
    /**
     * @see org.mineacademy.fo.settings.YamlConfig#onLoad()
     */
    @Override
    protected void onLoad() {
        this.firstJoinDate = this.getString("First_Join", "Not set.");
        this.chatColor = this.get("Chat_Color", CompChatColor.class, CompChatColor.WHITE);
 
        if (this.isSet("Items_Before_Death"))
            this.itemsBeforeDeath = this.getList("Items_Before_Death", ItemStack.class);
    }
 
    /**
     * @see org.mineacademy.fo.settings.YamlConfig#serialize()
     */
    @Override
    protected void onSave() {
        this.set("First_Join", this.firstJoinDate);
        this.set("Chat_Color", this.chatColor);
        this.set("Items_Before_Death", this.itemsBeforeDeath);
    }
 
    /**
     * You can also use saveToMap method instead of onSave, if you wish.
     */
 
    /*@Override
    public SerializedMap saveToMap() {
        SerializedMap map = new SerializedMap();
 
        map.put();
        map.putIfExist();
        map.putIf();
        map.putArray();
        map.putIfNonZero();
        map.putIfTrue();
 
        return map;
    }*/
 
    //
    // EXAMPLE: If you ever use Location object, make sure to return a clone of it otherwise it will get edited when
    //          you call setX() methods for it!
    //public Location getLocation() {
    //  return this.location != null ? this.location.clone() : null;
    //}
    //
 
    /* ------------------------------------------------------------------------------- */
    /* Non-Static */
    /* ------------------------------------------------------------------------------- */
 
    /**
     * These methods are used, when you want to set
     * the fields in the file and save them also.
     * <p>
     * Call them where you need to. After creating
     * or finding the data of course.
     */
 
    public void setFirstJoinDate(final String firstJoinDate) {
        this.firstJoinDate = firstJoinDate;
 
        this.save();
    }
 
    public void setChatColor(final CompChatColor chatColor) {
        this.chatColor = chatColor;
 
        this.save();
    }
 
    public void setItemsBeforeDeath(final List<ItemStack> itemsBeforeDeath) {
        this.itemsBeforeDeath = itemsBeforeDeath;
 
        this.save();
    }
 
    /* ------------------------------------------------------------------------------- */
    /* Static */
    /* ------------------------------------------------------------------------------- */
 
    public static ${NAME} createData(final String name) {
        return loadedData.loadOrCreateItem(name, () -> new ${NAME}(name));
    }
 
    public void removeData(final ${NAME} templateFolderData) {
        loadedData.removeItem(templateFolderData);
    }
 
    public void removeDataByName(final String name) {
        loadedData.removeItemByName(name);
    }
 
    public static ${NAME} findData(final String name) {
        return loadedData.findItem(name);
    }
 
    public static boolean isDataLoaded(final String name) {
        return loadedData.isItemLoaded(name);
    }
 
    public static Set<String> getLoadedDatasNames() {
        return loadedData.getItemNames();
    }
 
    /*
        Don't forget to call this method in class
        extending SimplePlugin -> onReloadablesStart method
     */
    public static void loadData() {
        loadedData.loadItems();
    }
 
}